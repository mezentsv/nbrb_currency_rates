{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","id","abbr","name","rate","selectedCurrency","setSelectedCurrency","currencyList","setCurrencyList","getCurrencies","a","axios","get","response","data","console","error","getCurrency","currAbbr","list","trargetCurrency","find","Cur_Abbreviation","Cur_ID","Cur_Name","Cur_OfficialRate","Cur_Scale","useEffect","then","className","InputLabel","Select","labelId","value","onChange","e","preventDefault","currentCurrencyAbbr","target","map","MenuItem","Number","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAmFeA,MA5Ef,WACE,MAAgDC,mBAAS,CACvDC,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,KAAM,KAJR,mBAAOC,EAAP,KAAyBC,EAAzB,KAMA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAa,uCAAG,4BAAAC,EAAA,+EAEKC,IAAMC,IAbjB,uDAWM,cAEZC,EAFY,yBAGXA,EAASC,MAHE,gCAKlBC,QAAQC,MAAR,MALkB,yDAAH,qDASbC,EAAc,SAACC,EAAUC,GAC7B,IAAMC,EAAkBD,EAAKE,MAC3B,qBAAGC,mBAA4CJ,KAEjDZ,EAAoB,CAClBL,GAAImB,EAAgBG,OACpBrB,KAAMkB,EAAgBE,iBACtBnB,KAAMiB,EAAgBI,SACtBpB,KAAMgB,EAAgBK,iBAAmBL,EAAgBM,aAiB7D,OAbAC,qBAAU,WACRlB,IAAgBmB,MAAK,SAACd,GACpBN,EAAgBM,GAChBG,EAAY,MAAOH,QAEpB,IASD,qBAAKe,UAAU,MAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,mCACA,gCACE,cAACC,EAAA,EAAD,CAAY7B,GAAG,WAAf,6BACA,cAAC8B,EAAA,EAAD,CACEC,QAAQ,WACR/B,GAAG,SACHgC,MAAO5B,EAAiBH,KACxBgC,SAjBS,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAsBF,EAAEG,OAAOL,MACrChB,EAAYoB,EAAqB9B,IAUzB,SAMGA,EAAagC,KAAI,YAA6C,IAA1ChB,EAAyC,EAAzCA,OAAQD,EAAiC,EAAjCA,iBAAkBE,EAAe,EAAfA,SAC7C,OACE,cAACgB,EAAA,EAAD,CAAuBP,MAAOX,EAA9B,SACGE,GADYD,cAQzB,0CACA,+BACGkB,OAAOpC,EAAiBD,MAAMsC,QAAQ,GACvC,+IChEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.059c0a83.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Select, MenuItem, InputLabel } from \"@material-ui/core\";\nimport \"./App.css\";\n\nconst RATES_URL = \"https://www.nbrb.by/api/exrates/rates?periodicity=0\";\n\nfunction App() {\n  const [selectedCurrency, setSelectedCurrency] = useState({\n    id: \"\",\n    abbr: \"\",\n    name: \"\",\n    rate: \"\",\n  });\n  const [currencyList, setCurrencyList] = useState([]);\n\n  const getCurrencies = async () => {\n    try {\n      const response = await axios.get(RATES_URL);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getCurrency = (currAbbr, list) => {\n    const trargetCurrency = list.find(\n      ({ Cur_Abbreviation }) => Cur_Abbreviation === currAbbr\n    );\n    setSelectedCurrency({\n      id: trargetCurrency.Cur_ID,\n      abbr: trargetCurrency.Cur_Abbreviation,\n      name: trargetCurrency.Cur_Name,\n      rate: trargetCurrency.Cur_OfficialRate / trargetCurrency.Cur_Scale,\n    });\n  };\n\n  useEffect(() => {\n    getCurrencies().then((data) => {\n      setCurrencyList(data);\n      getCurrency(\"USD\", data);\n    });\n  }, []);\n\n  const handleSelect = (e) => {\n    e.preventDefault();\n    const currentCurrencyAbbr = e.target.value;\n    getCurrency(currentCurrencyAbbr, currencyList);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"national-currency\">\n          <h1>1</h1>\n          <div>\n            <InputLabel id=\"currency\">Choose Currency</InputLabel>\n            <Select\n              labelId=\"currency\"\n              id=\"select\"\n              value={selectedCurrency.abbr}\n              onChange={handleSelect}\n            >\n              {currencyList.map(({ Cur_ID, Cur_Abbreviation, Cur_Name }) => {\n                return (\n                  <MenuItem key={Cur_ID} value={Cur_Abbreviation}>\n                    {Cur_Name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </div>\n        </div>\n        <span>–</span>\n        <h1>\n          {Number(selectedCurrency.rate).toFixed(3)}\n          <span> Белорусских Рубля</span>\n        </h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}