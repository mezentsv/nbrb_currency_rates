{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","id","abbr","name","rate","selectedCurrency","setSelectedCurrency","baseCurr","appliedCurr","currencyVals","setCurrencyVals","currencyList","setCurrencyList","getCurrencies","a","axios","get","response","data","console","error","getCurrency","currAbbr","list","trargetCurrency","find","Cur_Abbreviation","Cur_OfficialRate","Cur_Scale","Cur_ID","Cur_Name","Math","round","useEffect","then","handleCurrentCurrValChange","e","currType","preventDefault","newVal","value","target","className","InputLabel","Input","type","onChange","Select","labelId","currentCurrencyAbbr","map","MenuItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c31596.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Select, MenuItem, InputLabel, Input } from \"@material-ui/core\";\nimport \"./App.css\";\n\nconst RATES_URL = \"https://www.nbrb.by/api/exrates/rates?periodicity=0\";\n\nfunction App() {\n  const [selectedCurrency, setSelectedCurrency] = useState({\n    id: \"\",\n    abbr: \"\",\n    name: \"\",\n    rate: \"\",\n  });\n  const [currencyVals, setCurrencyVals] = useState({\n    baseCurr: 1,\n    appliedCurr: 1,\n  });\n\n  const [currencyList, setCurrencyList] = useState([]);\n\n  const getCurrencies = async () => {\n    try {\n      const response = await axios.get(RATES_URL);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getCurrency = (currAbbr, list) => {\n    const trargetCurrency = list.find(\n      ({ Cur_Abbreviation }) => Cur_Abbreviation === currAbbr\n    );\n    const rate = trargetCurrency.Cur_OfficialRate / trargetCurrency.Cur_Scale;\n    setSelectedCurrency({\n      id: trargetCurrency.Cur_ID,\n      abbr: trargetCurrency.Cur_Abbreviation,\n      name: trargetCurrency.Cur_Name,\n      rate,\n    });\n    setCurrencyVals({ baseCurr: Math.round(rate * 100) / 100, appliedCurr: 1 });\n  };\n\n  useEffect(() => {\n    getCurrencies().then((data) => {\n      setCurrencyList(data);\n      getCurrency(\"USD\", data);\n    });\n  }, []);\n\n  const handleSelect = (e) => {\n    e.preventDefault();\n    const currentCurrencyAbbr = e.target.value;\n    getCurrency(currentCurrencyAbbr, currencyList);\n  };\n\n  const handleCurrentCurrValChange = (e, currType = \"national\") => {\n    e.preventDefault();\n    const value = +e.target.value < 0 ? +e.target.value * -1 : +e.target.value;\n    let newVal;\n    if (currType === \"base\") {\n      newVal = value / selectedCurrency.rate;\n      setCurrencyVals({\n        baseCurr: value || \"\",\n        appliedCurr: Math.round(newVal * 100) / 100 || \"\",\n      });\n    } else if (currType === \"national\") {\n      newVal = value * selectedCurrency.rate;\n      setCurrencyVals({\n        baseCurr: Math.round(newVal * 100) / 100 || \"\",\n        appliedCurr: value || \"\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"national-currency\">\n          <div>\n            <InputLabel id=\"applied-curr\">Enter Value</InputLabel>\n            <Input\n              id=\"applied-curr\"\n              type=\"number\"\n              value={currencyVals.appliedCurr}\n              onChange={handleCurrentCurrValChange}\n            />\n          </div>\n\n          <div>\n            <InputLabel id=\"currency\">Choose Currency</InputLabel>\n            <Select\n              labelId=\"currency\"\n              id=\"select\"\n              value={selectedCurrency.abbr}\n              onChange={handleSelect}\n            >\n              {currencyList.map(({ Cur_ID, Cur_Abbreviation, Cur_Name }) => {\n                return (\n                  <MenuItem key={Cur_ID} value={Cur_Abbreviation}>\n                    {Cur_Name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </div>\n        </div>\n        <span>–</span>\n        <div className=\"base-currency\">\n          <Input\n            id=\"base-curr\"\n            type=\"number\"\n            value={currencyVals.baseCurr}\n            onChange={(e) => handleCurrentCurrValChange(e, \"base\")}\n          />\n          <h1>Белорусских Рубля</h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}